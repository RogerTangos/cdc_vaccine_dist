/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddPerson.java
 *
 * Created on Nov 15, 2011, 6:42:05 PM
 */
package UserInterface.Distributor;

import Business.Enterprise.CDC;
import Business.Enterprise.Distributor;
import Business.Enterprise.Enterprise;
import Business.Enterprise.PHD;
import Business.IndyPackage.Invoice;
import Business.IndyPackage.WorkRequest;
import Business.IndyPackage.UserAccount;
import Business.IndyPackage.Vaccine;
import Business.Organization.Organization;
import Business.Organization.Warehouse;
import Business.Providers.Inventory;
import Business.Providers.Provider;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Albert Carter
 */
public class ShipDistributorRequests extends javax.swing.JPanel {

    UserAccount ua;
    Organization o;
    Enterprise e;
    JPanel userProcessContainer;

    /** Creates new form AddPerson */
    public ShipDistributorRequests(javax.swing.JPanel jp, Enterprise e, Organization o, UserAccount ua) {
        initComponents();
        this.o = o;
        this.e = e;
        userProcessContainer = jp;
        this.ua = ua;

        jLabel1.setText(o.getOrgName() + " " + o.getClass().getSimpleName()+" | Manage Requests");
        refresh();
        refreshShipped();
    }

    void refresh() {
        int rowcount = receivedjTable.getRowCount();
        int i;
        for (i = rowcount - 1; i >= 0; i--) {
            ((DefaultTableModel) receivedjTable.getModel()).removeRow(i);
        }
        
        Map map = (Map) e.getWorkRequestList(); //cast the HashMap to map
        Set set = map.entrySet(); //and get the entry set
        Iterator iter = set.iterator(); //get the number of entries
        
        while(iter.hasNext()){
        Map.Entry entry = (Map.Entry) iter.next();
        ArrayList<WorkRequest> entryRequests = (ArrayList<WorkRequest>) entry.getValue();
        for(WorkRequest c : entryRequests){
            if(c.getEditorEnterprise() instanceof Distributor){
            Object[] col = new Object[5];
            col[0] = c;
            col[1] = c.getInventory().getVaccine();
            col[2] = c.getInventory().getCount();
            col[3] = c.getOriginator();
            col[4] = c.getOriginator().getClass().getSimpleName();

            ((DefaultTableModel) receivedjTable.getModel()).addRow(col);
        }
    }
        }
    }
    
    void refreshShipped(){
        int rowcount = madejTable1.getRowCount();
        int i;
        for (i = rowcount - 1; i >= 0; i--) {
            ((DefaultTableModel) madejTable1.getModel()).removeRow(i);
        }
        
        Map map = (Map) e.getWorkRequestList(); //cast the HashMap to map
        Set set = map.entrySet(); //and get the entry set
        Iterator iter = set.iterator(); //get the number of entries
        
        while(iter.hasNext()){
        Map.Entry entry = (Map.Entry) iter.next();
        ArrayList<WorkRequest> entryRequests = (ArrayList<WorkRequest>) entry.getValue();
        for(WorkRequest c : entryRequests){
            if(c.getEditorEnterprise() instanceof Warehouse){
            Object[] col = new Object[5];
            col[0] = c;
            col[1] = c.getInventory().getVaccine();
            col[2] = c.getInventory().getCount();
            col[3] = c.getOriginator();
            col[4] = c.getOriginator().getClass().getSimpleName();

            ((DefaultTableModel) madejTable1.getModel()).addRow(col);
        }
            }
        }
                
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backjButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        refreshjButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        receivedjTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        madejTable1 = new javax.swing.JTable();
        requestjButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel1.setText("jLabel1");

        backjButton.setText("<<Back");
        backjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButtonActionPerformed(evt);
            }
        });

        refreshjButton.setText("Refresh");
        refreshjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshjButtonActionPerformed(evt);
            }
        });

        receivedjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request Name", "Vaccine", "Count", "Originator Enterprise", "Originator Type"
            }
        ));
        receivedjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receivedjTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(receivedjTable);

        madejTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request Name", "Vaccine", "Count", "Originator Enterprise", "Originator Type"
            }
        ));
        madejTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                madejTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(madejTable1);

        requestjButton.setText("Ship to Providers");
        requestjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestjButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14));
        jLabel2.setText("Orders Shipped to Provider (by all warehouses):");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backjButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(refreshjButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 239, Short.MAX_VALUE)
                                .addComponent(requestjButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshjButton)
                    .addComponent(requestjButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(backjButton)
                .addGap(40, 40, 40))
        );
    }// </editor-fold>//GEN-END:initComponents

private void backjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButtonActionPerformed
// TODO add your handling code here:
    userProcessContainer.remove(this);
    CardLayout c3 = (CardLayout) userProcessContainer.getLayout();
    c3.previous(userProcessContainer);
}//GEN-LAST:event_backjButtonActionPerformed

private void refreshjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshjButtonActionPerformed
// TODO add your handling code here:
    refresh();
}//GEN-LAST:event_refreshjButtonActionPerformed

private void receivedjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receivedjTableMouseClicked
// TODO add your handling code here:
    

    
    
    
}//GEN-LAST:event_receivedjTableMouseClicked

private void madejTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_madejTable1MouseClicked
// TODO add your handling code here:
}//GEN-LAST:event_madejTable1MouseClicked

private void requestjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestjButtonActionPerformed
// TODO add your handling code here:
    int selectedRow = receivedjTable.getSelectedRow();
    if (selectedRow < 0 || selectedRow > receivedjTable.getRowCount()) {
        return;
    }

    
    WorkRequest wr = (WorkRequest) receivedjTable.getValueAt(selectedRow, 0);
    wr.setEditorEnterprise(o); //set it to an instance of organiation, so we know it's been touched (i.e.shipped)
    
    Inventory inventory = wr.getInventory();
    Vaccine vaccine = inventory.getVaccine();
    Double vaccinePrice = vaccine.getPrice();
    
    Provider originator = (Provider) wr.getOriginator();
    PHD phd = (PHD) originator.getPhd();
    CDC cdc = phd.getCdc();
    Distributor d = (Distributor) e;
     
    int vaccineNumberOrdered = inventory.getCount();
    Double phdPercent = vaccine.getPhdPercent();
    Double provPercent = vaccine.getProviderPercent();
    Double cdcPercent = vaccine.getCdcPercent();
    
    
    WorkRequest provWR = wr.cloneWorkRequest(wr);//Add the work request back to the provider's list... now it has inventory
    provWR = originator.newWorkRequest(provWR); 
//    *****IMPORTANT**** : we use the clone, and then new, because we actually need SEPARATE copies of WR.
    
    WorkRequest phdWR = wr.cloneWorkRequest(wr);
    phdWR = phd.newWorkRequest(phdWR);
    
    WorkRequest cdcProvWR = wr.cloneWorkRequest(wr);
    cdcProvWR = cdc.newWorkRequest(cdcProvWR);
    
    WorkRequest cdcPhdWR = wr.cloneWorkRequest(wr);
    cdcPhdWR = cdc.newWorkRequest(cdcPhdWR);
    
    //we create new invoices and set them to the PHD and Provider work requests
    Invoice provInvoice = new Invoice();
    provInvoice.setAmount(vaccinePrice * vaccineNumberOrdered * provPercent * .001);
    provInvoice.setOwedTo(cdc);
    provInvoice.setStatus("payable");
    provInvoice.setPayment("unpaid");
    provWR.setInvoice(provInvoice);
    
    Invoice phdInvoice = new Invoice();
    phdInvoice.setAmount(vaccinePrice * vaccineNumberOrdered * phdPercent * .001);
    phdInvoice.setOwedTo(cdc);
    phdInvoice.setStatus("payable");
    phdInvoice.setPayment("unpaid");
    phdWR.setInvoice(phdInvoice);
    
    //the CDC gets identical invoices, labeled as receivable, and attached to its work Request
    Invoice cdcProvInvoice = new Invoice();
    cdcProvInvoice.setAmount(vaccinePrice * vaccineNumberOrdered * provPercent * .001);
    cdcProvInvoice.setOwedTo(originator);
    cdcProvInvoice.setStatus("receivable");
    cdcProvInvoice.setPayment("unpaid");
    cdcProvWR.setInvoice(cdcProvInvoice);
    
    Invoice cdcPhdInvoice = new Invoice();
    cdcPhdInvoice.setAmount(vaccinePrice * vaccineNumberOrdered * phdPercent * .001);
    cdcPhdInvoice.setOwedTo(originator.getPhd());
    cdcPhdInvoice.setStatus("receivable");
    cdcPhdInvoice.setPayment("unpaid");
    cdcPhdWR.setInvoice(cdcPhdInvoice);
    
    //the original work request gets a dummy invoice, just so that it doesn't show up in the list.
//    Invoice dadInvoice = new Invoice();
//    wr.setInvoice(dadInvoice);
    
    
//    d.newRequestShipped(wr); // copies from the o list to the distributor one.
//    d.getWorkRequestList().remove(wr);//remove the wr from the original list.  
//    I no longer need a request shipped list. All requests without an invoice do not show up.

    
    //define who the provider, phd, and cdc are
    
    
    
    
    //make a new invoice for the provider    
//    Inventory provInventory = new Inventory();
//    provInventory.setCount(inventory.getCount());
//    provInventory.setDateCreated(inventory.getDateCreated());
//    provInventory.setDateExpired(inventory.getDateCreated());
//    provInventory.setManufacturer(inventory.getManufacturer());
//    provInventory.setPrice(inventory.getPrice());
//    provInventory.setSerialNo(inventory.getSerialNo());
//    provInventory.setVaccine(inventory.getVaccine());
//    provInventory.setWarehouse(inventory.getWarehouse());
    
        //find the accounts payable organization
//    Payable provPayable = null;
//    for(Organization o: originator.getOrganizationList()){
//        if(o instanceof Payable){
//        provPayable = (Payable) o;
//    }else{
//          JOptionPane.showMessageDialog(null, "this organization has no accounts receivable organization");  
//        }}
//    
//    WorkRequest provWR = provPayable.newWorkRequest();
//    provWR.setInventory(provInventory);
//    provWR.setCreator(ua);
//    provWR.setOriginator(wr.getOriginator());//originator is the original enterprise that placed the order
//    
//    
//    
//    provWR.setInvoice(provInvoice);
//    
//    //make a new invoice for the PHD
//    Inventory phdInventory = new Inventory();
//    phdInventory.setCount(inventory.getCount());
//    phdInventory.setDateCreated(inventory.getDateCreated());
//    phdInventory.setDateExpired(inventory.getDateCreated());
//    phdInventory.setManufacturer(inventory.getManufacturer());
//    phdInventory.setPrice(inventory.getPrice());
//    phdInventory.setSerialNo(inventory.getSerialNo());
//    phdInventory.setVaccine(inventory.getVaccine());
//    phdInventory.setWarehouse(inventory.getWarehouse());
//    
//    //find the accounts payable organization
//    Payable phdPayable = null;
//    for(Organization o: phd.getOrganizationList()){
//        if(o instanceof Payable){
//        phdPayable = (Payable) o;
//    } }
//    
//    WorkRequest phdWR = phdPayable.newWorkRequest();
//    phdWR.setInventory(phdInventory);
//    phdWR.setCreator(ua);
//    phdWR.setOriginator(wr.getOriginator());
//    
//    Invoice phdInvoice = new Invoice();
//    phdInvoice.setAmount(vaccinePrice * vaccineNumberOrdered * phdPercent * .001);
//    phdInvoice.setOwedTo(cdc);
//    phdInvoice.setStatus("payable");
//    phdWR.setInvoice(phdInvoice);
//    
//    //make new invoice for the CDC (to get money)
//    
//    //cdc gets these put in receivable because 
//    Receivable cdcReceivable = null;
//    for(Organization o: cdc.getOrganizationList()){
//        if(o instanceof Receivable){
//        cdcReceivable = (Receivable) o;
//    } }
//    
//    WorkRequest cdcProvWR = new WorkRequest();
//    cdcProvWR = provWR;
//    cdcReceivable.getWorkRequestList().add(cdcProvWR);
//    
//    WorkRequest cdcPhdWR = new WorkRequest();
//    cdcPhdWR = phdWR;
//    cdcReceivable.getWorkRequestList().add(cdcPhdWR);
//    
    //the CDC shares these invoices with teh Provider and Phd,
//    so when the PHD pays, it's marked as "unpaid" for hte cdc.
//    CDC's results are the opposite of PHD.
    
    
//    Inventory cdcInventory = new Inventory();
//    cdcInventory.setCount(inventory.getCount());
//    cdcInventory.setDateCreated(inventory.getDateCreated());
//    cdcInventory.setDateExpired(inventory.getDateCreated());
//    cdcInventory.setManufacturer(inventory.getManufacturer());
//    cdcInventory.setPrice(inventory.getPrice());
//    cdcInventory.setSerialNo(inventory.getSerialNo());
//    cdcInventory.setVaccine(inventory.getVaccine());
//    
//    phdInventory.setWarehouse(inventory.getWarehouse());
//    WorkRequest cdcWR = cdc.newWorkRequest();
//    cdcWR.setInventory(cdcInventory);
//    cdcWR.setCreator(ua);
//    cdcWR.setOriginator(wr.getOriginator());
//    
//    Invoice cdcInvoice = new Invoice();
//    cdcWR.setInvoice(cdcInvoice);
//    
//    cdcInvoice.setAmount(vaccinePrice * vaccineNumberOrdered * (phdPercent + provPercent) * .001);
//    cdcInvoice.setOwedTo(cdc);
//    cdcInvoice.setStatus("receivable");
    
    refreshShipped();//the bottom table, with requests made to the CDC
    refresh();
    
    
}//GEN-LAST:event_requestjButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable madejTable1;
    private javax.swing.JTable receivedjTable;
    private javax.swing.JButton refreshjButton;
    private javax.swing.JButton requestjButton;
    // End of variables declaration//GEN-END:variables
}
